# Mateo Estrada
# Black box testing project for software engineering II
# October 15, 2021

"""
My method was based using the idea that I have to check for
empty credit card numbers,
too long of values > 16 and less than 15.
Visa: starts with a 4: needs to be 16 long
Master Card: needs to start 51-55 or 2221-2720 and be length 16
American Express: needs to start 34 or 37 AND be length 15
The following tests were generated by checking boundary
conditions for the length of each credit card.
The functions have the Name of the card; the prefix;
and the length to account for.
I used the TSLgenerator to get started and then guessed and checked.
My intuition is telling me something,
after running some tests based on boundary conditions
it seems like the code that
I'm testing is the Luhn Algorithm.
Yet I can't seem to find test_bug2()...
"""


import unittest
from credit_card_validator import credit_card_validator


class TestCreditCardValidator(unittest.TestCase):
    def test_bug1(self):
        # Empty case; I choose it based on intuition about easiest case
        self.assertEqual(credit_card_validator(''), True)

    def test_bug2(self):
        # Visa Prefix: 4 length: 16; Choosen by TSLgenerator
        self.assertFalse(credit_card_validator('4004442546646813'))

    def test_bug2_1(self):
        # Visa Prefix: 4 length: 16; Choosen by TSLgenerator
        self.assertFalse(credit_card_validator('400444254664681'))

    def test_bug3(self):
        # American Express Prefix: 34 length: 16; I guessed
        # based on boundaries
        self.assertEqual(credit_card_validator('3498526336766269'), True)

    def test_bug4(self):
        # American Express Prefix: 34 length: 14; I guessed,
        # based on boundaries
        self.assertFalse(credit_card_validator('34805925822008'))

    def test_bug5(self):
        # American Express with prefix: 37 length: 15; Choosen by TSLgenerator
        self.assertEqual(credit_card_validator('370036168428825'), True)

    def test_bug6(self):
        # MasterCard Prefix: 53 length: 16; I guessed based on boundaries
        self.assertEqual(credit_card_validator('5372072942852474'), True)

    def test_bug7(self):
        # MasterCard prefix: 55 length: 16; I guessed based on boundaries
        self.assertEqual(credit_card_validator('5574235337868217'), True)

    def test_bug8(self):
        # MasterCard prefix: 55 length: 16; I guessed based on boundaries
        self.assertEqual(credit_card_validator('5574235337868217'), True)

    def test_bug9(self):
        # MasterCard prefix: 2720 length: 16; Choosen by TSLgenerator
        self.assertFalse(credit_card_validator('2720235337868217'))

    def test_bug10(self):
        # MasterCard prefix: 2221 length: 16; Choosen by me by making
        # a valid Luhn number.
        self.assertEqual(credit_card_validator('2221000000090000'), True)

    def test_bug11(self):
        # MasterCard prefix: 5172 length: 17; Choosen by me by making
        # a valid Luhn number.
        self.assertFalse(credit_card_validator('51729778377282529'))

    def test_bug12(self):
        # American Express with prefix: 00 length: 16; Choosen by guessing
        self.assertFalse(credit_card_validator('0000000000000004'))


if __name__ == '__main__':
    unittest.main()